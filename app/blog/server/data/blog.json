{
	"posts" : [
		{
			"title" : "Hello World",
			"content" : "<p>I built this blog to learn Node, Express, MongoDB, and to brush up on my Angular. Though I have worked with the M.E.A.N stack before, I was using the Mean.js boilerplate. I was able to get things working, but I never gave myself the chance to really understand how they worked (more on this in a later post).</p><p>Initially I was going to develop this in MeteorJS. However, after reading several complaints about performance, and feeling generally uncomfortable about putting all my eggs into one high-level basket, I opted to build everything from scratch. This has turned out to be a very enriching experience. Nowadays we are seeing Front-End frameworks rise and fall at an alarming rate. Many developers are struggling to decide which bandwagon to jump onto, be it ReactJS, AngularJS, Backbone, Meteor, Knockout, etc.</p> <p>My feeling is this--who knows what the landscape will be in two years, better to decouple as much as we can, that way when the next shiny new MV* gets announced on Hacker News, we can swap it out without having to rewrite our entire application. This, in my opinion, is the greatest weakness of MeteorJS, while at the same time being its greatest appeal--a framework that handles everything.</p>",
			"tags" : ["misc"],
			"dateCreated" : ""
		},
		{
			"title" : "Structuring a M.E.A.N Application",
			"content": "<p>Most M.E.A.N tutorials use a flat file structure that divides the client from the server. This approach quickly falls apart once one attempts to scale their application. Also, seperating the client and server makes developing modules cumbersome, as one is constantly having to navigate between two seperate locations.</p> <p> This also misses one of the greatest benefits of using a full JavaScript stack--that being, we no longer need to seperate concerns between client and server. With M.E.A.N we can, and in my opinion, should, structure our files by module rather than by type. Even the base files such as the server file and the angularjs app, I believe, should be cointained within their own module, one which I call 'base'.</p>  <p>Following this pattern, my root has only a public folder, an app folder, the node_modules folder, and the bower_components folder (along with git and gulp files).</p> <p>Within my app folder I have a sub-folder for each module, in the case of this site: base, blog, portfolio, etc. Within each of these folders there is a client and a server folder. The client folder holds my AngularJS/Front-End files, again divided into sub-folders, such as controllers, service, directives, views, filters, less, etc. The server folder contains my NodeJS files such as controllers, routes, models, etc.</p><p>Using gulp, I recurse through the app folder, and concat/uglify all js files within **/client folders. Likewise I build/minify/concat all scss files within **/scss folders, and minify all html files within **/client/view folders. These files get moved to /public/(html/js/css) respectively.</p>"
		}
	]
}